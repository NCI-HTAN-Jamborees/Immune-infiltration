---
title: "seurat_filter"
output: html_document
date: "2023-12-06"
---
# Filtering cells for WUSTL PDAC scRNA-seq dataset
```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE)
```

## library and working diresctories set-ups
```{r}

library(Seurat)
library(dplyr)

getwd() #"/sbgenomics/workspace"
output_dir = "/sbgenomics/output-files/"
project_file = "/sbgenomics/project-files/"

```

## load input seurat object
```{r}
dat = readRDS(paste0(project_file, 'scRNAseq_processing/', 'scRNAseq_seurat_object.rds'))
#combined data from Jason

```

## Calculate QC
```{r}

#get mitochondrial and ribosomal genes
dat <- PercentageFeatureSet(dat, "^MT-", col.name = "percent_mito")

dat <- PercentageFeatureSet(dat, "^RP[SL]", col.name = "percent_ribo")

#dim(dat) #844341 x 137068 genes x cells
#colnames(dat@meta.data) # 5 meta columns including pct mito and pct rb
```

## Plot QC
```{r,  fig.width=10, fig.height=20, fig.fullwidth=TRUE}
feats <- c("nFeature_RNA", "nCount_RNA", "percent_mito", "percent_ribo" )

## separate by sample
VlnPlot(dat, group.by = "orig.ident", features = feats, ncol = 1, pt.size = 0) + NoLegend()
```
```{r,  fig.width=10, fig.height=20, fig.fullwidth=TRUE}


dat@meta.data$nCount_RNA
dat@meta.data$sample_ID = dat@meta.data$orig.ident
dat = SetIdent(dat, value = c(rep('UNC', dim(dat)[2]))) # change active ident to 'Unclassified'

VlnPlot(dat,  features = feats, ncol = 1, pt.size =0,)
```

## Detection based filtering

```{r}
plot1 <- FeatureScatter(dat, feature1 = "nCount_RNA", feature2 = "percent_mito")
plot2 <- FeatureScatter(dat, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
```

```{r}
# remove cells with too low or too high number of genes
#remove high mito pct cells
dat = subset(dat, subset = nFeature_RNA > 200 & nFeature_RNA < 10000 & percent_mito < 5)
dim(dat)

selected_f <- rownames(dat)[Matrix::rowSums(dat) >0.05* dim(dat)[2]] #keep genes that are detected in at least 10 cells
dat =  subset(dat, features = selected_f)
dim(dat)


```



## Normalization and Scaling
```{r}
#reduce data size 
dat2 = subset(dat, downsample = 0.5*dim(dat)[2] )
dim(dat2)


#dat = NULL

dat2 = NormalizeData(dat2, normalization.method = 'LogNormalize' )
dat2 <- FindVariableFeatures(dat2, selection.method = "vst", nfeatures = 2000) #find highly variable genes

all.genes2 <- rownames(dat2)
dat2 <- ScaleData(dat2, features = all.genes2)

dat2
```

## Dimensional reduction
```{r}
dat2 <- RunPCA(dat2, features = VariableFeatures(object = dat2))
print(dat2[["pca"]], dims = 1:3, nfeatures = 5)
ElbowPlot(dat2) # check PC variant capturing degree
```

## Clustering cells
```{r}
dat2 <- FindNeighbors(dat2, dims = 1:10)
dat3 <- FindClusters(dat2, resolution = 0.4)
```
## UMAP and visualization
```{r}
dat2 <- RunUMAP(dat2, dims = 1:10)
DimPlot(dat3, reduction = "umap")
```

```{r}
DimPlot(dat2, reduction = "umap" , group.by = 'orig.ident')
```


## Save result
```{r}
saveRDS(dat3, file = paste0(output_dir, 'seurat_scRNA_filtered_downsampled.rds'))

dat_reload = readRDS(paste0(output_dir, 'seurat_scRNA_filtered_downsampled.rds')) # test if saved properly

#passed the test

```

## plot gene expression
```{r, fig.width=5, fig.height=5, }

FeaturePlot(dat_reload, features = c("PTPRC",  "SPP1", "CD4", "MS4A1", 
    "CD8", "NKG7", 'KRT18', 'MUC1','TFF1', 'CTRB2', 'COL1A1'), ncol = 2)
#selected markers from Nina

DimPlot(dat_reload, group.by = 'orig.ident')
```

